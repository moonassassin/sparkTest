<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>SpartTest</groupId>
	<artifactId>SpartTest</artifactId>
	<version>2.0.3-SNAPSHOT</version>

	<parent>
		<groupId>org.apache</groupId>
		<artifactId>apache</artifactId>
		<version>14</version>
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.7</java.version>
		<maven.compiler.source>${java.version}</maven.compiler.source>
    <maven.compiler.target>${java.version}</maven.compiler.target>
		<maven.version>3.3.9</maven.version>
		<sbt.project.name>spark</sbt.project.name>
		<mesos.version>0.21.1</mesos.version>
		<mesos.classifier>shaded-protobuf</mesos.classifier>
		<slf4j.version>1.7.16</slf4j.version>
		<log4j.version>1.2.17</log4j.version>
		<hadoop.version>2.2.0</hadoop.version>
		<protobuf.version>2.5.0</protobuf.version>
		<yarn.version>${hadoop.version}</yarn.version>
		<flume.version>1.6.0</flume.version>
		<zookeeper.version>3.4.5</zookeeper.version>
		<curator.version>2.4.0</curator.version>
		<hive.group>org.spark-project.hive</hive.group>
		<!-- Version used in Maven Hive dependency -->
		<hive.version>1.2.1.spark2</hive.version>
		<!-- Version used for internal directory structure -->
		<hive.version.short>1.2.1</hive.version.short>
		<derby.version>10.12.1.1</derby.version>
		<parquet.version>1.7.0</parquet.version>
		<hive.parquet.version>1.6.0</hive.parquet.version>
		<jetty.version>9.2.16.v20160414</jetty.version>
		<javaxservlet.version>3.1.0</javaxservlet.version>
		<chill.version>0.8.0</chill.version>
		<ivy.version>2.4.0</ivy.version>
		<oro.version>2.0.8</oro.version>
		<codahale.metrics.version>3.1.2</codahale.metrics.version>
		<avro.version>1.7.7</avro.version>
		<avro.mapred.classifier>hadoop2</avro.mapred.classifier>
		<jets3t.version>0.7.1</jets3t.version>
		<aws.kinesis.client.version>1.6.1</aws.kinesis.client.version>
		<!-- the producer is used in tests -->
		<aws.kinesis.producer.version>0.10.2</aws.kinesis.producer.version>
		<!-- org.apache.httpcomponents/httpclient -->
		<commons.httpclient.version>4.5.2</commons.httpclient.version>
		<commons.httpcore.version>4.4.4</commons.httpcore.version>
		<!-- commons-httpclient/commons-httpclient -->
		<httpclient.classic.version>3.1</httpclient.classic.version>
		<commons.math3.version>3.4.1</commons.math3.version>
		<!-- managed up from 3.2.1 for SPARK-11652 -->
		<commons.collections.version>3.2.2</commons.collections.version>
		<scala.version>2.11.8</scala.version>
		<scala.binary.version>2.11</scala.binary.version>
		<codehaus.jackson.version>1.9.13</codehaus.jackson.version>
		<fasterxml.jackson.version>2.6.5</fasterxml.jackson.version>
		<snappy.version>1.1.2.6</snappy.version>
		<netlib.java.version>1.1.2</netlib.java.version>
		<calcite.version>1.2.0-incubating</calcite.version>
		<commons-codec.version>1.10</commons-codec.version>
		<commons-io.version>2.4</commons-io.version>
		<!-- org.apache.commons/commons-lang/ -->
		<commons-lang2.version>2.6</commons-lang2.version>
		<!-- org.apache.commons/commons-lang3/ -->
		<commons-lang3.version>3.3.2</commons-lang3.version>
		<datanucleus-core.version>3.2.10</datanucleus-core.version>
		<janino.version>2.7.8</janino.version>
		<jersey.version>2.22.2</jersey.version>
		<joda.version>2.9.3</joda.version>
		<jodd.version>3.5.2</jodd.version>
		<jsr305.version>1.3.9</jsr305.version>
		<libthrift.version>0.9.3</libthrift.version>
		<antlr4.version>4.5.3</antlr4.version>
		<jpam.version>1.1</jpam.version>
		<selenium.version>2.52.0</selenium.version>
		<paranamer.version>2.8</paranamer.version>
		<maven-antrun.version>1.8</maven-antrun.version>

		<test.java.home>${java.home}</test.java.home>
		<test.exclude.tags></test.exclude.tags>

		<!-- When using different JDKs for the build, we can't use Zinc for the 
			jdk8 part. -->
		<useZincForJdk8>true</useZincForJdk8>

		<!-- Package to use when relocating shaded classes. -->
		<spark.shade.packageName>org.spark_project</spark.shade.packageName>

		<!-- Modules that copy jars to the build directory should do so under this 
			location. -->
		<jars.target.dir>${project.build.directory}/scala-${scala.binary.version}/jars</jars.target.dir>

		<!-- Allow modules to enable / disable certain build plugins easily. -->
		<build.testJarPhase>prepare-package</build.testJarPhase>
		<build.copyDependenciesPhase>none</build.copyDependenciesPhase>

		<!-- Dependency scopes that can be overridden by enabling certain profiles. 
			These profiles are declared in the projects that build assemblies. For other 
			projects the scope should remain as "compile", otherwise they are not available 
			during compilation if the dependency is transivite (e.g. "graphx/" depending 
			on "core/" and needing Hadoop classes in the classpath to compile). -->
		<flume.deps.scope>compile</flume.deps.scope>
		<hadoop.deps.scope>compile</hadoop.deps.scope>
		<hive.deps.scope>compile</hive.deps.scope>
		<parquet.deps.scope>compile</parquet.deps.scope>
		<parquet.test.deps.scope>test</parquet.test.deps.scope>

		<!-- Overridable test home. So that you can call individual pom files directly 
			without things breaking. -->
		<spark.test.home>${session.executionRootDirectory}</spark.test.home>

		<PermGen>64m</PermGen>
		<MaxPermGen>512m</MaxPermGen>
		<CodeCacheSize>512m</CodeCacheSize>

		<CodeCacheSize>512m</CodeCacheSize>
		<sbt.project.name>examples</sbt.project.name>
		<build.testJarPhase>none</build.testJarPhase>
		<build.copyDependenciesPhase>package</build.copyDependenciesPhase>
		<hadoop.deps.scope>provided</hadoop.deps.scope>
		<hive.deps.scope>provided</hive.deps.scope>
		<parquet.deps.scope>provided</parquet.deps.scope>
	</properties>


	<dependencies>
		<dependency>
			<groupId>org.spark-project.spark</groupId>
			<artifactId>unused</artifactId>
			<version>1.0.0</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.spark</groupId>
			<artifactId>spark-streaming_${scala.binary.version}</artifactId>
			<version>${project.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.spark</groupId>
			<artifactId>spark-mllib_${scala.binary.version}</artifactId>
			<version>${project.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.spark</groupId>
			<artifactId>spark-hive_${scala.binary.version}</artifactId>
			<version>${project.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.spark</groupId>
			<artifactId>spark-graphx_${scala.binary.version}</artifactId>
			<version>${project.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.spark</groupId>
			<artifactId>spark-streaming-kafka-0-10_${scala.binary.version}</artifactId>
			<version>${project.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.spark</groupId>
			<artifactId>spark-sql-kafka-0-10_${scala.binary.version}</artifactId>
			<version>${project.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-math3</artifactId>
			<scope>provided</scope>
			<version>${commons.math3.version}</version>
		</dependency>
		<dependency>
			<groupId>org.scalacheck</groupId>
			<artifactId>scalacheck_${scala.binary.version}</artifactId>
			<version>1.12.5</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.scala-lang</groupId>
			<artifactId>scala-library</artifactId>
			<version>${scala.version}</version>
			<scope>provided</scope>
		</dependency>
	</dependencies>
	
	<profiles>
    <profile>
      <id>kinesis-asl</id>
      <dependencies>
        <dependency>
          <groupId>org.apache.spark</groupId>
          <artifactId>spark-streaming-kinesis-asl_${scala.binary.version}</artifactId>
          <version>${project.version}</version>
          <scope>provided</scope>
        </dependency>
      </dependencies>
    </profile>
  </profiles>
  <build>
  	<pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.7.0</version>
          <configuration>
            <source>${java.version}</source>
            <target>${java.version}</target>
            <skipMain>true</skipMain> <!-- skip compile -->
            <skip>true</skip> <!-- skip testCompile -->
          </configuration>
        </plugin>
        </plugins>
        </pluginManagement>
  </build>
</project>